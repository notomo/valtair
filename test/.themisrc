
call themis#option('recursive', 1)

let s:root = getcwd()
let s:lines = &lines
let s:cmdheight = &cmdheight
let s:showtabline = &showtabline

function! ValtairTestBeforeEach(assert) abort
    execute 'cd' s:root

    set columns=200
    let &lines = s:lines
    let &cmdheight = s:cmdheight
    let &showtabline = s:showtabline

    call valtair#messenger#set_func({ msg -> themis#log('[test messanger] ' . msg) })
    call valtair#logger#set_func({ msg -> themis#log(msg) })
    call themis#log('')

    function! a:assert.contains_line(needle) abort
        let line = getline(line('.'))
        call self.true(count(line, a:needle) != 0, a:needle . ' must be in the line, but actual: ' . line)
    endfunction

    function! a:assert.window_width(width) abort
        let actual = winwidth(0)
        call self.true(actual == a:width, 'The width of the window should be ' . a:width . ', but actual: ' . actual)
    endfunction

    function! a:assert.window_height(height) abort
        let actual = winheight(0)
        call self.true(actual == a:height, 'The height of the window should be ' . a:height . ', but actual: ' . actual)
    endfunction

    function! a:assert.window_count(count) abort
        let window_count = tabpagewinnr(tabpagenr(), '$')
        let message = printf('window count must be %s, but actual: %s', a:count, window_count)
        call self.equals(window_count, a:count, message)
    endfunction
endfunction

function! ValtairTestAfterEach() abort
    silent! %bwipeout!
    call valtair#logger#clear()
    call valtair#messenger#clear()
endfunction
